#!/usr/bin/env bash

# Colors
COL_BLUE="\x1b[36;01m"
COL_GREEN="\x1b[32;01m"
COL_RESET="\x1b[39;49;00m"
COL_RED="\x1b[31;01m"

VIM_DIR=$HOME/.vim

# Helper functions
_print() {
  printf $COL_BLUE"\n$1\n"$COL_RESET
}

_error() {
  printf $COL_RED"\n\t[Error] $1\n"$COL_RESET
}

_success() {
  printf $COL_GREEN"\n\t$1\n"$COL_RESET
}

_usage() {
  _print "  Usage:            install [-ah]

  Options:

  -h                Show this message
  -m                Install MacVim through homebrew first, then setup vim config
  "

  exit 0
}

#############################################################################

_install_macvim() {
  # MacVim
  _print "Installing MacVim with homebrew (don't worry, won't install twice)"
  echo `sudo mv /usr/bin/vim /usr/bin/vim.osx` > /dev/null
  brew install macvim --override-system-vim
}

_install() {
  # check for fzf
  if ! [ -x "$(command -v git)" ]; then
    _print "Installing fzf"
    brew install fzf
    exit 1
  fi

  # Vundle
  _print "Installing Vundle"
  if [ -d "$VIM_DIR/bundle/vundle" ] ; then
    _success "Vundle is already installed"
  else
    git clone https://github.com/VundleVim/Vundle.vim.git $VIM_DIR/bundle/Vundle.vim
  fi

  curdir=$(pwd)

  # Backup vimrc if exists
  if [ -f "$HOME/.vimrc" ] || [ -L "$HOME/.vimrc" ] ; then
    mv "$HOME/.vimrc" "$HOME/.vimrc.backup"
  fi

  # Symlink new vimrc
  ln -s $VIM_DIR/vimrc ~/.vimrc

  # _print "Install plugins"
  # vim +PluginInstall +qall

  _print "Installing python (for neovim)"
  v=$(which nnvim)
  _print $v
  if [ "$v" != "nnvim not found" ]; then
    _print ">>> NEO VIM"
  fi
  # pip2 install --user neovim
  # pip3 install --user neovim

  _success  "Ready to rock!"
  _print    "* Reload your shell for maximum effect *"

  # output something to see we installed vim
  echo 1 > '.vim-installed'
}

#############################################################################

if [ $# -eq 0 ]; then
  _print "Installing"
  _install
fi

#############################################################################

# parse arguments
while getopts :hma opt; do
  case $opt in
    m)
    _install_macvim
    _install
    ;;
    h)
    _usage
    ;;
    *)
    _error "Invalid option received"
    _usage
    exit 0
    ;;
  esac
done
